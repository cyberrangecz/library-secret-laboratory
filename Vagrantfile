# Vagrantfile generated by Sandbox Creator.
#
# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # device (host): man
  config.vm.define "man" do |device|
    device.vm.hostname = "man"
    device.vm.box = "generic/debian10"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 256
      provider.cpus = 1
    end
    device.vm.network :private_network, ip: "10.1.26.100", netmask: "16", virtualbox__intnet: "net"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  end

  # device (host): attacker
  config.vm.define "attacker" do |device|
    device.vm.hostname = "attacker"
    device.vm.box = "munikypo/kali-2019.4"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 2048
      provider.cpus = 2
    end
    device.vm.network :private_network, ip: "10.1.135.83", netmask: "16", virtualbox__intnet: "net"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  end

  # device (host): server
  config.vm.define "server" do |device|
    device.vm.hostname = "server"
    device.vm.box = "generic/debian10"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 512
      provider.cpus = 1
    end
    device.vm.network :private_network, ip: "10.1.26.9", netmask: "16", virtualbox__intnet: "net"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  end

  # device (host): client
  config.vm.define "client" do |device|
    device.vm.hostname = "client"
    device.vm.box = "generic/debian10"
    device.vm.provider "virtualbox" do |provider|
      provider.memory = 512
      provider.cpus = 1
    end
    device.vm.network :private_network, ip: "10.1.17.4", netmask: "16", virtualbox__intnet: "net"
    device.vm.synced_folder ".", "/vagrant", type: "rsync", rsync__exclude: ".git/"
  end

  # basic configuration of devices and networks
  config.vm.provision :ansible_local do |provisioner|
    provisioner.playbook = "provisioning/playbook.yml"
    provisioner.groups = {
      "hosts" => ['server', 'client', 'attacker'],
    }
    provisioner.extra_vars = {
      ansible_python_interpreter: "/usr/bin/python3",
    }
    provisioner.raw_arguments = Shellwords.shellsplit(ENV['ANSIBLE_ARGS']) if ENV['ANSIBLE_ARGS']
    #provisioner.verbose = "vvv"
  end

end
